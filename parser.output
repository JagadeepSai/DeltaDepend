Terminals unused in grammar

   INTEGER


Grammar

    0 $accept: PROG $end

    1 PROG: STMT

    2 STMT: '{' STMTs '}'
    3     | FOR_STMT
    4     | ARR_STMT

    5 STMTs: STMTs STMT
    6      | %empty

    7 ARR_INDEX_EQ: INTEGER_NUMBER '*' NAME
    8             | ARR_INDEX_EQ '+' ARR_INDEX_EQ
    9             | ARR_INDEX_EQ '-' ARR_INDEX_EQ
   10             | NAME
   11             | INTEGER_NUMBER

   12 ARR_STMT: ARRAY ASSIGN_OP ARRSUM ';'

   13 ARRSUM: ARRAY '+' ARRSUM
   14       | ARRAY

   15 ARRAY: NAME '[' ARR_INDEX_EQ ARRAY1

   16 ARRAY1: ']' '[' ARR_INDEX_EQ ARRAY1
   17       | ']'

   18 $@1: %empty

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT

   20 INCRE: NAME '+' '+'
   21      | NAME '-' '-'

   22 COND: '(' COND ')'
   23     | NAME LT INTEGER_NUMBER
   24     | NAME LTE INTEGER_NUMBER
   25     | NAME GT INTEGER_NUMBER
   26     | NAME GTE INTEGER_NUMBER
   27     | NAME EQ INTEGER_NUMBER
   28     | NAME NEQ INTEGER_NUMBER
   29     | NOT COND


Terminals, with rules where they appear

$end (0) 0
'(' (40) 19 22
')' (41) 19 22
'*' (42) 7
'+' (43) 8 13 20
'-' (45) 9 21
';' (59) 12 19
'[' (91) 15 16
']' (93) 16 17
'{' (123) 2
'}' (125) 2
error (256)
INTEGER (258)
ASSIGN_OP (259) 12 19
GTE (260) 26
LTE (261) 24
LT (262) 23
GT (263) 25
EQ (264) 27
NEQ (265) 28
NOT (266) 29
FOR (267) 19
NAME (268) 7 10 15 19 20 21 23 24 25 26 27 28
INTEGER_NUMBER (269) 7 11 19 23 24 25 26 27 28


Nonterminals, with rules where they appear

$accept (25)
    on left: 0
PROG (26)
    on left: 1, on right: 0
STMT (27)
    on left: 2 3 4, on right: 1 5 19
STMTs (28)
    on left: 5 6, on right: 2 5
ARR_INDEX_EQ (29)
    on left: 7 8 9 10 11, on right: 8 9 15 16
ARR_STMT (30)
    on left: 12, on right: 4
ARRSUM (31)
    on left: 13 14, on right: 12 13
ARRAY (32)
    on left: 15, on right: 12 13 14
ARRAY1 (33)
    on left: 16 17, on right: 15 16
FOR_STMT (34)
    on left: 19, on right: 3
$@1 (35)
    on left: 18, on right: 19
INCRE (36)
    on left: 20 21, on right: 19
COND (37)
    on left: 22 23 24 25 26 27 28 29, on right: 19 22 29


State 0

    0 $accept: . PROG $end

    FOR   shift, and go to state 1
    NAME  shift, and go to state 2
    '{'   shift, and go to state 3

    PROG      go to state 4
    STMT      go to state 5
    ARR_STMT  go to state 6
    ARRAY     go to state 7
    FOR_STMT  go to state 8


State 1

   19 FOR_STMT: FOR . '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT

    '('  shift, and go to state 9


State 2

   15 ARRAY: NAME . '[' ARR_INDEX_EQ ARRAY1

    '['  shift, and go to state 10


State 3

    2 STMT: '{' . STMTs '}'

    $default  reduce using rule 6 (STMTs)

    STMTs  go to state 11


State 4

    0 $accept: PROG . $end

    $end  shift, and go to state 12


State 5

    1 PROG: STMT .

    $default  reduce using rule 1 (PROG)


State 6

    4 STMT: ARR_STMT .

    $default  reduce using rule 4 (STMT)


State 7

   12 ARR_STMT: ARRAY . ASSIGN_OP ARRSUM ';'

    ASSIGN_OP  shift, and go to state 13


State 8

    3 STMT: FOR_STMT .

    $default  reduce using rule 3 (STMT)


State 9

   19 FOR_STMT: FOR '(' . NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT

    NAME  shift, and go to state 14


State 10

   15 ARRAY: NAME '[' . ARR_INDEX_EQ ARRAY1

    NAME            shift, and go to state 15
    INTEGER_NUMBER  shift, and go to state 16

    ARR_INDEX_EQ  go to state 17


State 11

    2 STMT: '{' STMTs . '}'
    5 STMTs: STMTs . STMT

    FOR   shift, and go to state 1
    NAME  shift, and go to state 2
    '{'   shift, and go to state 3
    '}'   shift, and go to state 18

    STMT      go to state 19
    ARR_STMT  go to state 6
    ARRAY     go to state 7
    FOR_STMT  go to state 8


State 12

    0 $accept: PROG $end .

    $default  accept


State 13

   12 ARR_STMT: ARRAY ASSIGN_OP . ARRSUM ';'

    NAME  shift, and go to state 2

    ARRSUM  go to state 20
    ARRAY   go to state 21


State 14

   19 FOR_STMT: FOR '(' NAME . ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT

    ASSIGN_OP  shift, and go to state 22


State 15

   10 ARR_INDEX_EQ: NAME .

    $default  reduce using rule 10 (ARR_INDEX_EQ)


State 16

    7 ARR_INDEX_EQ: INTEGER_NUMBER . '*' NAME
   11             | INTEGER_NUMBER .

    '*'  shift, and go to state 23

    $default  reduce using rule 11 (ARR_INDEX_EQ)


State 17

    8 ARR_INDEX_EQ: ARR_INDEX_EQ . '+' ARR_INDEX_EQ
    9             | ARR_INDEX_EQ . '-' ARR_INDEX_EQ
   15 ARRAY: NAME '[' ARR_INDEX_EQ . ARRAY1

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    ']'  shift, and go to state 26

    ARRAY1  go to state 27


State 18

    2 STMT: '{' STMTs '}' .

    $default  reduce using rule 2 (STMT)


State 19

    5 STMTs: STMTs STMT .

    $default  reduce using rule 5 (STMTs)


State 20

   12 ARR_STMT: ARRAY ASSIGN_OP ARRSUM . ';'

    ';'  shift, and go to state 28


State 21

   13 ARRSUM: ARRAY . '+' ARRSUM
   14       | ARRAY .

    '+'  shift, and go to state 29

    $default  reduce using rule 14 (ARRSUM)


State 22

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP . INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT

    INTEGER_NUMBER  shift, and go to state 30


State 23

    7 ARR_INDEX_EQ: INTEGER_NUMBER '*' . NAME

    NAME  shift, and go to state 31


State 24

    8 ARR_INDEX_EQ: ARR_INDEX_EQ '+' . ARR_INDEX_EQ

    NAME            shift, and go to state 15
    INTEGER_NUMBER  shift, and go to state 16

    ARR_INDEX_EQ  go to state 32


State 25

    9 ARR_INDEX_EQ: ARR_INDEX_EQ '-' . ARR_INDEX_EQ

    NAME            shift, and go to state 15
    INTEGER_NUMBER  shift, and go to state 16

    ARR_INDEX_EQ  go to state 33


State 26

   16 ARRAY1: ']' . '[' ARR_INDEX_EQ ARRAY1
   17       | ']' .

    '['  shift, and go to state 34

    $default  reduce using rule 17 (ARRAY1)


State 27

   15 ARRAY: NAME '[' ARR_INDEX_EQ ARRAY1 .

    $default  reduce using rule 15 (ARRAY)


State 28

   12 ARR_STMT: ARRAY ASSIGN_OP ARRSUM ';' .

    $default  reduce using rule 12 (ARR_STMT)


State 29

   13 ARRSUM: ARRAY '+' . ARRSUM

    NAME  shift, and go to state 2

    ARRSUM  go to state 35
    ARRAY   go to state 21


State 30

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER . ';' COND ';' INCRE ')' $@1 STMT

    ';'  shift, and go to state 36


State 31

    7 ARR_INDEX_EQ: INTEGER_NUMBER '*' NAME .

    $default  reduce using rule 7 (ARR_INDEX_EQ)


State 32

    8 ARR_INDEX_EQ: ARR_INDEX_EQ . '+' ARR_INDEX_EQ
    8             | ARR_INDEX_EQ '+' ARR_INDEX_EQ .
    9             | ARR_INDEX_EQ . '-' ARR_INDEX_EQ

    $default  reduce using rule 8 (ARR_INDEX_EQ)


State 33

    8 ARR_INDEX_EQ: ARR_INDEX_EQ . '+' ARR_INDEX_EQ
    9             | ARR_INDEX_EQ . '-' ARR_INDEX_EQ
    9             | ARR_INDEX_EQ '-' ARR_INDEX_EQ .

    $default  reduce using rule 9 (ARR_INDEX_EQ)


State 34

   16 ARRAY1: ']' '[' . ARR_INDEX_EQ ARRAY1

    NAME            shift, and go to state 15
    INTEGER_NUMBER  shift, and go to state 16

    ARR_INDEX_EQ  go to state 37


State 35

   13 ARRSUM: ARRAY '+' ARRSUM .

    $default  reduce using rule 13 (ARRSUM)


State 36

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' . COND ';' INCRE ')' $@1 STMT

    NOT   shift, and go to state 38
    NAME  shift, and go to state 39
    '('   shift, and go to state 40

    COND  go to state 41


State 37

    8 ARR_INDEX_EQ: ARR_INDEX_EQ . '+' ARR_INDEX_EQ
    9             | ARR_INDEX_EQ . '-' ARR_INDEX_EQ
   16 ARRAY1: ']' '[' ARR_INDEX_EQ . ARRAY1

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    ']'  shift, and go to state 26

    ARRAY1  go to state 42


State 38

   29 COND: NOT . COND

    NOT   shift, and go to state 38
    NAME  shift, and go to state 39
    '('   shift, and go to state 40

    COND  go to state 43


State 39

   23 COND: NAME . LT INTEGER_NUMBER
   24     | NAME . LTE INTEGER_NUMBER
   25     | NAME . GT INTEGER_NUMBER
   26     | NAME . GTE INTEGER_NUMBER
   27     | NAME . EQ INTEGER_NUMBER
   28     | NAME . NEQ INTEGER_NUMBER

    GTE  shift, and go to state 44
    LTE  shift, and go to state 45
    LT   shift, and go to state 46
    GT   shift, and go to state 47
    EQ   shift, and go to state 48
    NEQ  shift, and go to state 49


State 40

   22 COND: '(' . COND ')'

    NOT   shift, and go to state 38
    NAME  shift, and go to state 39
    '('   shift, and go to state 40

    COND  go to state 50


State 41

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND . ';' INCRE ')' $@1 STMT

    ';'  shift, and go to state 51


State 42

   16 ARRAY1: ']' '[' ARR_INDEX_EQ ARRAY1 .

    $default  reduce using rule 16 (ARRAY1)


State 43

   29 COND: NOT COND .

    $default  reduce using rule 29 (COND)


State 44

   26 COND: NAME GTE . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 52


State 45

   24 COND: NAME LTE . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 53


State 46

   23 COND: NAME LT . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 54


State 47

   25 COND: NAME GT . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 55


State 48

   27 COND: NAME EQ . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 56


State 49

   28 COND: NAME NEQ . INTEGER_NUMBER

    INTEGER_NUMBER  shift, and go to state 57


State 50

   22 COND: '(' COND . ')'

    ')'  shift, and go to state 58


State 51

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' . INCRE ')' $@1 STMT

    NAME  shift, and go to state 59

    INCRE  go to state 60


State 52

   26 COND: NAME GTE INTEGER_NUMBER .

    $default  reduce using rule 26 (COND)


State 53

   24 COND: NAME LTE INTEGER_NUMBER .

    $default  reduce using rule 24 (COND)


State 54

   23 COND: NAME LT INTEGER_NUMBER .

    $default  reduce using rule 23 (COND)


State 55

   25 COND: NAME GT INTEGER_NUMBER .

    $default  reduce using rule 25 (COND)


State 56

   27 COND: NAME EQ INTEGER_NUMBER .

    $default  reduce using rule 27 (COND)


State 57

   28 COND: NAME NEQ INTEGER_NUMBER .

    $default  reduce using rule 28 (COND)


State 58

   22 COND: '(' COND ')' .

    $default  reduce using rule 22 (COND)


State 59

   20 INCRE: NAME . '+' '+'
   21      | NAME . '-' '-'

    '+'  shift, and go to state 61
    '-'  shift, and go to state 62


State 60

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE . ')' $@1 STMT

    ')'  shift, and go to state 63


State 61

   20 INCRE: NAME '+' . '+'

    '+'  shift, and go to state 64


State 62

   21 INCRE: NAME '-' . '-'

    '-'  shift, and go to state 65


State 63

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' . $@1 STMT

    $default  reduce using rule 18 ($@1)

    $@1  go to state 66


State 64

   20 INCRE: NAME '+' '+' .

    $default  reduce using rule 20 (INCRE)


State 65

   21 INCRE: NAME '-' '-' .

    $default  reduce using rule 21 (INCRE)


State 66

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 . STMT

    FOR   shift, and go to state 1
    NAME  shift, and go to state 2
    '{'   shift, and go to state 3

    STMT      go to state 67
    ARR_STMT  go to state 6
    ARRAY     go to state 7
    FOR_STMT  go to state 8


State 67

   19 FOR_STMT: FOR '(' NAME ASSIGN_OP INTEGER_NUMBER ';' COND ';' INCRE ')' $@1 STMT .

    $default  reduce using rule 19 (FOR_STMT)
